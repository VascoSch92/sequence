[tool.poetry]
name = "sequentium"
version = "0.0.1"
description = ""
authors = ["vasco schiavo"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.9"


[tool.poetry.dev-dependencies]
pytest = "^7.4.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# Set of rules enabled
select = [
    "E", # Pycodestyle Error
    "F", # Pyflakes
    "B", # Flake8-bugbear
    "W", # Pycodestyle Warning
    "D200", # One-line docstring should fit on one line
    "D202", # No blank lines allowed after function docstring
    "D300", # Use triple double quotes """
    "D404", # First word of the docstring should not be "This"
    "UP003", # Use {} instead of type(...)
    "UP008", # Use super() instead of super(_class_, self)
    "UP011", # Unnecessary parentheses to functools.lru_cache
    "UP027", # Replace unpacked list comprehension with a generator expression
    "UP032", # Use f-string instead of format call
    "C4", # flake8-comprehensions
    "ICN", # flake8-import-conventions
    "NPY", # NumPy-specific rules (NPY)
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
    "PTH", # flake8-use-pathlib
]

# Ignored rules
ignore = [
    "ARG002", # Checks for the presence of unused arguments in instance method definitions
    "F821", # Checks for uses of undefined names
    "B020", # Checks for contextlib.suppress without arguments
    "B023", # Checks for function definitions that use a loop variable
    "PTH123", # Checks for uses of the open builtin
    "PIE804", # Checks for unnecessary dict kwargs
    "PIE807", # Checks for lambdas that can be replaced with the list builtin
    "W605", # Checks for invalid escape sequences
]

# Set the max length of a line
line-length = 121

# The style in which the output message should be formatted
output-format = "text"

# Set of rules ignored per file
[tool.ruff.per-file-ignores]
"tests/*" = ["F403", "F405"]
"sequence/__init__.py" = ["F403"]